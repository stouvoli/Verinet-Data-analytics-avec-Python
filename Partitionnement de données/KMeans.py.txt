import itertools
import random
import tqdm
from linear_algebra import squared_distance

class KMeans:
  def __init__(self, k: int) -> None:
    self.k = k # nombre de groupes
    self.means = None
  def classify(self, input: Vector) -> int:
    """retourne l’index du groupe le plus proche de la sortie"""
    return min(range(self.k), key=lambda i: squared_distance(input, self.means[i]))
  def train(self, inputs: List[Vector]) -> None:
    # commencer avec des affectations aléatoires
    assignments = [random.randrange(self.k) for _ in inputs]
    with tqdm.tqdm(itertools.count()) as t:
      for _ in t:
        # calculer des moyennes et trouver de nouvelles affectations
        self.means = cluster_means(self.k, inputs, assignments)
        new_assignments = [self.classify(input) for input in inputs]
        # Contrôler le nombre d’affectations changées
        # et si nous avons terminé.
        num_changed = num_differences(assignments, new_assignments)
        if num_changed == 0:
          return
        # Sinon, conserver les nouvelles affectations
        # et calculer de nouvelles moyennes.
        assignments = new_assignments
        self.means = cluster_means(self.k, inputs, assignments)
        t.set_description(f"changed: {num_changed} / {len(inputs)}")