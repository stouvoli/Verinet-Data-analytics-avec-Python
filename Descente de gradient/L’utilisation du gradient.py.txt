import random
from linear_algebra import Vector, add, scalar_multiply, distance

def gradient_step(v: Vector, gradient: Vector, step_size: float) -> Vector:
    """se déplacer de step_size dans la direction de gradient depuis v"""
    assert len(v) == len(gradient)
    step = scalar_multiply(step_size, gradient)
    return add(v, step)

def sum_of_squares_gradient(v: Vector) -> Vector:
    return [2 * v_i for v_i in v]

# choisir un point de départ aléatoire
v = [random.uniform(-10, 10) for i in range(3)]

for epoch in range(1000):
    grad = sum_of_squares_gradient(v)  # calculer le gradient en v
    v = gradient_step(v, grad, -0.01)  # effectuer un pas de gradient négatif
    print(epoch, v)

assert distance(v, [0, 0, 0]) < 0.001  # v devrait être proche de 0
